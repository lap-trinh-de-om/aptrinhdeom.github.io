[{"content":"Về terminal thì sao? Khi sử dụng VSCode, chúng ta thường có 1 terminal phía dưới để dễ làm việc hoặc theo dõi log khi code.\nGiải pháp trên Vim thì mình có 2 giải pháp:\n Có Floatterm của COC.nvim khá hay, nó là 1 terminal nổi trên vim, khi nào cần thì mở lên gõ, xong thì đóng lại. Dùng tmux, mình thích cách này hơn, dùng tmux chia nhiều khung ra dễ nhìn và thao tác hơn, bản thân tmux chia khung khá thông minh, do đường viền rất nhỏ, nên tận dụng tối đa khả năng hiển thị những thứ cần thiết. Nó trông như vậy:   tmux.png \nNếu màn hình lớn khoảng 24 inch thì chia vậy rất ngon để code đó các bạn 😻\nNhư vậy chúng ta đã hoàn thành toàn bộ cách cấu hình, cài đăt, cấu hình để Vim có thể làm 1 IDE chính để code, và code trên Vim thật sự rất hào hứng, rất vui các bạn ạ, hãy thử nhé :)\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-10-terminal-cho-vim-thi-sao/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-10-terminal-cho-vim-thi-sao/","title":"[Phần 10] Vim là cái quái gì? - Về termial trong Vim thì sao nhỉ?"},{"content":"Vim là quái gì vậy? Vim là 1 IDE được rất nhiều người sử dụng trên thế giới, Vim có sẵn trên các nền tảng, rất gọn nhẹ, khó sử dụng, nhưng khi đã xài quen rồi thì nghiện luôn 😍\nVim sau khi cấu hình thì có thể sử dụng như 1 IDE mà các bạn thường sử dụng như VSCode, Sublime Text, Atom\u0026hellip;\nDemo Vim mình đang xài: Tại sao nên dùng Vim để code?  [Gọn, nhẹ] Xấu cực đỉnh, chính vì thế nên rất gọn nhẹ, thời gian khởi động của Vim cực kì nhanh. [Tùy biến] Khả năng tùy biến cực cao, mặc định thì nó khá xấu, nhưng sau khi tùy biến lại thì sẽ rất đẹp. [Plugins, Extensions] Rất nhiều, hỗ trợ hầu hết các ngôn ngữ về code highlight và autocomplete, dễ dàng cài đặt và cấu hình. [Cộng đồng] Cộng đồng cực lớn, cần gì thì sẽ tìm được hỗ trợ rất nhiều trên mạng, không phải lo. [Tốc độ làm việc] Tốc độ làm việc với Vim rất nhanh, tất cả thao tác khi code với Vim đều trên bàn phím, thậm chí không cần đến chuột, nên mọi thứ rất nhanh. [Tiện dụng] Dễ dàng chuyển đổi giữa các thiết bị máy tính, giữa các hệ điều hành chỉ cần file .vimrc là xong, rất đơn giản, không cần cài lại thủ công từng plugin sau khi qua môi trường mới. [Cảm giác] Cảm giác code với Vim rất ngầu, pro, đỉnh, nên sẽ dễ gây nghiện 🤤, có hứng thú khi code hơn.  Nhược điểm của Vim  Khó tiếp cận, khó làm quen, đòi hỏi phải có sự kiên nhẫn và quyết tâm cao, nếu không thì rất dễ nản. Rất nhiều phím tắt cần phải nhớ, phải tập làm quen nhiều lần mới nhớ được.  Phím tắt trong Vim thường dùng:  Di chuyển:  Dùng 4 phím h,j,k,l để di chuyển qua trái, xuống, lên, qua phải gg để di chuyển nhanh lên dòng số 1 Shift + g để di chuyển xuống dưới cùng của file ^ đề về đầu dòng $ để về cuối w để đi tới 1 từ (word) b để đi lùi 1 từ   Chế độ Insert:  i để đưa con trỏ về chế độ Insert ngay tại vị trí con trỏ Shift + A để con trỏ về chế độ Insert ở cuối dòng a để đưa con trỏ về chế độ Insert tại ngay sau con trỏ 1 ký tự   Chế độ Delete:  dw để delete tới 1 từ db để delete lùi 1 từ cw để delete tới 1 từ và đưa con trỏ về chế độ Insert cb để delete lùi 1 từ và đưa con trỏ về chế độ Insert di\u0026quot; xóa tất cả nội dung trong cặp dấu \u0026quot;\u0026quot;, các bạn gõ di và ký tự muốn xóa đến đó nhé: di), di]  Ví dụ \u0026quot;Đây là nội dung\u0026quot; thì khi gõ di\u0026quot; thì chỉ còn lại \u0026quot;\u0026quot; Ví dụ 2: function convert(value: string, convertTo: number) {}, khi trỏ tại chỗ value và gõ di) thì còn lại: function convert() {}   ci\u0026quot; tương tự như di\u0026quot; chỉ khác sau khi xóa thì đưa con trỏ về chế độ Insert luôn nhé.     vim-demo.png \nPhần tiếp theo ta sẽ cùng cài đặt Vim package manager để cài đặt plugin này nọ :)\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-1/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-1/","title":"[Phần 1] Vim là cái quái gì?"},{"content":"Cài đặt Vim để code giống IDE Vim-Plug Vim có rất nhiều Package Manager như:\n Vim Plug Vundle Pathogen Dein.vim Janus  Nhưng Vim Plug có vẻ được rất nhiều người sử dụng, có lượt bình chọn khá cao, nên mình cũng xài Vim Plug luôn 🙂\nCác lý do nên xài Vim Plug:\n Dễ dàng cài đặt, cấu hình và sử dụng Cài plugin từ bất cứ đâu, có thể từ folder, từ git, từ tên plugin\u0026hellip; Dễ dàng gỡ bỏ plugins mình không cần xài nữa Cài đặt plugin khá nhanh Hỗ trợ 3 hệ điều hành thường sử dụng: Linux, MacOS, Windows  Cài đặt Vim Plug: Rất đơn giản, chỉ 1 dòng lệnh curl là cài xong rồi 🤤\ncurl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Cấu hình Vim Plug:  Tạo file .vimrc trong thư mục user của hệ điều hành, thường để trong dấu ~ như thế này: ~/.vimrc Để các plugin cần cài đặt bên trong khối này:  call plug#begin() ... call plug#end()   Các plugin cần bắt đầu với từ khóa Plug\n  Ví dụ:\ncall plug#begin(\u0026#39;~/.vim/plugged\u0026#39;)  \u0026#34; Make sure you use single quotes \u0026#34; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug \u0026#39;junegunn/vim-easy-align\u0026#39; \u0026#34; Any valid git URL is allowed Plug \u0026#39;https://github.com/junegunn/vim-github-dashboard.git\u0026#39; \u0026#34; Multiple Plug commands can be written in a single line using | separators Plug \u0026#39;SirVer/ultisnips\u0026#39; | Plug \u0026#39;honza/vim-snippets\u0026#39; \u0026#34; On-demand loading Plug \u0026#39;scrooloose/nerdtree\u0026#39;, { \u0026#39;on\u0026#39;: \u0026#39;NERDTreeToggle\u0026#39; } Plug \u0026#39;tpope/vim-fireplace\u0026#39;, { \u0026#39;for\u0026#39;: \u0026#39;clojure\u0026#39; } \u0026#34; Using a non-default branch Plug \u0026#39;rdnetto/YCM-Generator\u0026#39;, { \u0026#39;branch\u0026#39;: \u0026#39;stable\u0026#39; } \u0026#34; Using a tagged release; wildcard allowed (requires git 1.9.2 or above) Plug \u0026#39;fatih/vim-go\u0026#39;, { \u0026#39;tag\u0026#39;: \u0026#39;*\u0026#39; } \u0026#34; Plugin options Plug \u0026#39;nsf/gocode\u0026#39;, { \u0026#39;tag\u0026#39;: \u0026#39;v.20150303\u0026#39;, \u0026#39;rtp\u0026#39;: \u0026#39;vim\u0026#39; } \u0026#34; Plugin outside ~/.vim/plugged with post-update hook Plug \u0026#39;junegunn/fzf\u0026#39;, { \u0026#39;dir\u0026#39;: \u0026#39;~/.fzf\u0026#39;, \u0026#39;do\u0026#39;: \u0026#39;./install --all\u0026#39; } \u0026#34; Unmanaged plugin (manually installed and updated) Plug \u0026#39;~/my-prototype-plugin\u0026#39; \u0026#34; Initialize plugin system call plug#end()   Phần tiếp theo chúng ta sẽ bắt đầu làm đẹp Vim :v\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-2-vim-plug/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-2-vim-plug/","title":"[Phần 2] Vim là cái quái gì? - Cài đặt Vim-Plug"},{"content":"Theme code highlight: [Onedark](https://github.com/joshdick/onedark.vim) Đây là theme code highlight mà mình thấy khá đẹp và thích sử dụng nhất, nó giống với theme trên Atom, nó trông thế này:\n onedark.png \nCài đặt theme Onedark: Thêm dòng này vào file ~/.vimrc\nvim ~/.vimrc\ncall plug#begin() ... Plug https://github.com/joshdick/onedark.vim call plug#end() ... syntax on colorscheme onedark ... Sau đó lưu lại và chạy lệnh này trên terminal, không cần thoát vim nha:\n:source ~/.vimrc :PlugInstall Tận hưởng giao diện thôi nào 😋\nPhần tiếp theo chúng ta sẽ cài đặt giao diện giống thế này: ","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-3-onedark/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-3-onedark/","title":"[Phần 3] Vim là cái quái gì? - Làm đẹp Vim với OneDark"},{"content":"Theme giao diện: [Vim Airline](https://github.com/vim-airline/vim-airline) Vim airline là plugin để làm cho cửa sổ terminal xài Vim của bạn không bị nhàm chán, nó có những thứ phía dưới như sau:\n vim-airline.png \nKhá đẹp đúng không, cho mình biết được những thông tin như:\n NORMAL: mode của vim hiện tại, có thể là NORMAL, INSERT, VIRSUAL Git branch là gì Tên file hiện tại Ngôn ngữ của file đó là gì Encode của file là gì: utf-8 Phần trăm của con trỏ so với tổng số dòng Số dòng hiện tại / tổng số dòng của file (ln:15/65) Cột của con trỏ đang đứng (col:1)  Rồi giờ cài đặt và cấu hình nó nào:\nCài đặt Vim Airline: vim ~/.vimrc\ncall plug#begin() ... Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39; call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Cài thêm font power-airline vô nữa thì nó mới hiển thị mấy cái symbol (ký tự) của branch, mũi tên đúng được:\nTrên ubuntu hoặc debian hoặc các Linux distro dựa trên debian:\nsudo apt install fonts-powerline Trên MacOS hoặc các OS khác:\n# clone git clone https://github.com/powerline/fonts.git --depth=1 # install cd fonts ./install.sh # clean-up a bit cd .. rm -rf fonts =\u0026gt; Đổi font của terminal lại thành \u0026#34;Source Code Pro for Powerline\u0026#34; Vậy là cài xong, giờ cấu hình nào.\nCấu hình Vim Airline: Các bạn vào link này để xem các theme hiện có của Airline nhé: https://github.com/vim-airline/vim-airline/wiki/Screenshots\nMình lựa được theme bubblegum thấy dẹp đẹp, nên quăng vô xài thôi 😍\nlet g:airline_theme=\u0026#39;bubblegum\u0026#39; let g:airline_powerline_fonts=1 Cấu hình cho các symbol hiển thị đúng:\nif !exists(\u0026#39;g:airline_symbols\u0026#39;) let g:airline_symbols = {} endif \u0026#34;\u0026#34; powerline symbols let g:airline_left_sep = \u0026#39;\u0026#39; let g:airline_left_alt_sep = \u0026#39;\u0026#39; let g:airline_right_sep = \u0026#39;\u0026#39; let g:airline_right_alt_sep = \u0026#39;\u0026#39; let g:airline_symbols.branch = \u0026#39;\u0026#39; let g:airline_symbols.readonly = \u0026#39;\u0026#39; let g:airline_symbols.linenr = \u0026#39;ln\u0026#39; let g:airline_symbols.maxlinenr = \u0026#39;\u0026#39; let g:airline_symbols.dirty=\u0026#39;⚡\u0026#39; let g:airline_symbols.colnr=\u0026#39;col\u0026#39;\u0026#34; Cấu hình để hiển thị branch name:\nlet g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#hunks#enabled=0 let g:airline#extensions#hunks#coc_git = 1 Vậy là xong, tận hưởng thành quả nào.\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-4-vim-airline/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-4-vim-airline/","title":"[Phần 4] Vim là cái quái gì? - Làm đẹp Vim với Vim Airline"},{"content":"Sidebar: [NERDTree](https://github.com/preservim/nerdtree) Thường các IDE cần phải có sidebar để hiển thị cấu trúc thư mục của dự án, để mình dễ hình dung các files bố trí thế nào này nọ.\nTrong Vim cũng sẽ có sidebar này, và NERDTree là plugin mà được nhiều người xài nhất.\nNó trông thế này đây:\n nerdtree.png \nCũng giống mấy cái IDE khác thôi, nhưng mình nói trước cái này sẽ dùng phím để di chuyển nha, chứ không dùng chuột đâu 😅\nCài đặt NERDTree: vim ~/.vimrc\ncall plug#begin()  ... Plug \u0026#39;preservim/nerdtree\u0026#39; ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Giờ cấu hình cho nó nào.\nCấu hình NERDTree: Đây là tất cả config cho NERDTree mà mình đang xài:\n\u0026#34;\u0026#34; Hiện file ẩn let NERDTreeShowHidden=1 autocmd VimEnter * NERDTree | wincmd p autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * NERDTree | if argc() \u0026gt; 0 || exists(\u0026#34;s:std_in\u0026#34;) | wincmd p | endif \u0026#34;\u0026#34; Mở cùng NERDTree cho tab mới, mặc định là mỗi tab sẽ mở 1 cái mới autocmd BufWinEnter * silent NERDTreeMirror \u0026#34;\u0026#34; Tự đóng NERDTree khi đóng tab, mặc định giữ lại NERDTree autocmd BufEnter * if tabpagenr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif autocmd bufenter * if (winnr(\u0026#34;$\u0026#34;) == 1 \u0026amp;\u0026amp; exists(\u0026#34;b:NERDTree\u0026#34;) \\ \u0026amp;\u0026amp; b:NERDTree.isTabTree()) | q | endif \u0026#34;\u0026#34; Tìm file đang mở trong thư mục bên NERDTree (mặc định không sync với nhau) map \u0026lt;leader\u0026gt;r :NERDTreeFind\u0026lt;cr\u0026gt; Gõ :w để lưu, xong gõ tiếp: :source ~/.vimrc\nVậy là xong cái sidebar, quá dễ đúng không 😻\nCác chuyển đổi qua lại giữa NERDTree và code: Các bạn gõ phím tắt Ctrl + ww 2 lần ww nha, thì nó sẽ chuyển đổi qua lại giữa NERDTree và code dễ dàng.\nCách tìm file trong NERDTree: Các bạn có thểm tìm file bằng cách giống như tìm text trong vim:\nGõ dấu / xong gõ tên file cần tìm, ví dụ /index enter, thì nó tự nhảy trỏ tới file đó luôn.\nTìm thư mục cũng tương tự nhé 😂\nCách tạo file mới, đổi tên, xóa file bằng NERDTree: Các bạn chỉ cần di chuyển trỏ tới thư mục cần tạo file/thư mục mới,\nxong ấn m (có nghĩa là show menu lên), xong ấn a (nghĩa là add).\n Nếu tạo file thì để đuôi file vô, không có dấu / ở cuối. Nếu tạo folder thì phải có dấu / ở cuối nha.  Ví dụ:\n nerdtree-2.png \n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-5-sidebar-with-nerdtree/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-5-sidebar-with-nerdtree/","title":"[Phần 5] Vim là cái quái gì? - Thêm Sidebar cho Vim"},{"content":"Hỗ trợ search file nhanh, giống Ctrl + P trên VSCode: [FZF.vim](https://github.com/junegunn/fzf.vim) Nhu cầu cơ bản của dev là phải search nhanh file cần tìm để đáp ứng code, chứ nhiều khi không thể nhớ đường dẫn vô file đó, nên cần 1 plugin để hỗ trợ nó, nó gọi là FZF, nó giống vầy nè:\n fzf.png \nGõ Ctrl + P rồi search file y chang bên VSCode nha ✌️\nCài đặt FZF.vim vim ~/.vimrc\ncall plug#begin()  ... Plug \u0026#39;junegunn/fzf\u0026#39;, { \u0026#39;do\u0026#39;: { -\u0026gt; fzf#install() } } Plug \u0026#39;junegunn/fzf.vim\u0026#39; ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Xong rồi, giờ cấu hình tiếp nào\nCấu hình FZF.vim: \u0026#34;\u0026#34; Map phím tắt Ctrl + P nnoremap \u0026lt;silent\u0026gt; \u0026lt;C-S-p\u0026gt; :Files\u0026lt;CR\u0026gt; \u0026#34;\u0026#34; Tìm file trong project, nhưng bỏ mấy thư mục như node_modules ra, để tìm nhẹ hơn. set wildmode=list:longest,list:full set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__ let $FZF_DEFAULT_COMMAND = \u0026#34;find * -path \u0026#39;*/\\.*\u0026#39; -prune -o -path \u0026#39;**/node_modules/**\u0026#39; -prune -o -path \u0026#39;node_modules/**\u0026#39; -prune -o -path \u0026#39;target/**\u0026#39; -prune -o -path \u0026#39;dist/**\u0026#39; -prune -o -type f -print -o -type l -print 2\u0026gt; /dev/null\u0026#34; Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Vậy là ngon, chạy thử thôi 😋\nHỗ trợ search nội dung trong file nhanh, giống Ctrl + Shift + F trên VSCode: Phần này chúng ta cũng sử dụng FZF.vim luôn, không cần cài plugin mới nhé, cấu hình luôn thôi nào:\ncommand! -bang -nargs=* Rg call fzf#vim#grep(\u0026#34;rg --column --line-number --no-heading --color=always --smart-case \u0026#34;.shellescape(\u0026lt;q-args\u0026gt;), 1, {\u0026#39;options\u0026#39;: \u0026#39;--delimiter : --nth 4..\u0026#39;}, \u0026lt;bang\u0026gt;0) \u0026#34;\u0026#34; Map phím \u0026#34;\\f\u0026#34; để tìm nội dung, tương tự như \u0026#34;Ctrl + Shift + F\u0026#34; trên VSCode nhé nnoremap \u0026lt;silent\u0026gt; \u0026lt;Leader\u0026gt;f :Rg\u0026lt;CR\u0026gt; Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Phần tiếp theo mình sẽ cấu hình cho Vim có thể gợi y code (autocomplete code) như thế nào nhé\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-6-tim-file-voi-fzf/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-6-tim-file-voi-fzf/","title":"[Phần 6] Vim là cái quái gì? - Search tên file và nội dung nhanh với FZF"},{"content":"Language Server Protocol (LSP): VSCode là 1 IDE rất phổ biến, bởi vì nó hỗ trợ rất nhiều ngôn ngữ, cả VSCode và LSP cho VSCode đều do Microsoft phát triển nên cực kỳ ngon rồi.\nTrong Vim cũng có rất nhiều giải pháp cho LSP, sau khi thử vài cái thì mình thấy COC.nvim là hợp lý và mạnh nhất so với mấy cái còn lại.\nCài đặt [COC.nvim](https://github.com/neoclide/coc.nvim) vim ~/.vimrc\ncall plug#begin() ... Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Vậy là đã cài đặt xong COC.nvim, giờ tiếp tục cấu hình\nCài đặt LSP cho javascript/typescript Chạy lệnh này trên vim của bạn:\n:CocInstall coc-json coc-tsserver Hoặc bạn có thể để vào trong file ~/.vimrc để dễ dàng cài đặt nơi khác, dưới đây là toàn bộ extensions mình đang xài\nlet g:coc_global_extensions = [ \\ \u0026#39;coc-ultisnips\u0026#39;, \\ \u0026#39;coc-json\u0026#39;, \\ \u0026#39;coc-tsserver\u0026#39;, \\ \u0026#39;coc-html\u0026#39;, \\ \u0026#39;coc-css\u0026#39;, \\ \u0026#39;coc-yaml\u0026#39;, \\ \u0026#39;coc-highlight\u0026#39;, \\ \u0026#39;coc-eslint\u0026#39;, \\ \u0026#39;coc-git\u0026#39;, \\ \u0026#39;coc-prettier\u0026#39;, \\ \u0026#39;coc-flutter\u0026#39;, \\ \u0026#39;coc-angular\u0026#39;, \\ \u0026#39;coc-pyright\u0026#39;, \\ ] Bạn có thể xem danh sách các extensions của COC.nvim tại đây: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions\nCấu hình autocomplete, auto import file: COC.nvim cũng hỗ trợ autocomplete sau khi cài đặt LSP, cũng như auto import file vô\nCách map key như sau:\n\u0026#34;\u0026#34; Map Ctrl + Space để show list functions/biến autocomplete inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-space\u0026gt; coc#refresh() \u0026#34;\u0026#34; Tự động import file của biến/function khi chọn và nhấn Tab inoremap \u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-y\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;TAB\u0026gt;\u0026#34; Khá đơn giản phải không, thực tế phần auto import hoạt động rất hiệu quả, mình thấy ngon hơn VSCode ở chỗ nhanh hơn nhiều.\nCấu hình phím tắt go to definition\u0026hellip; COC.nvim hỗ trợ các tính năng auto complete, go to definition\u0026hellip; rất tốt, bạn đưa phần này vào ~/.vimrc\n\u0026#34;\u0026#34; Go to definition ở tab mới nmap \u0026lt;silent\u0026gt; gd :call CocAction(\u0026#39;jumpDefinition\u0026#39;, \u0026#39;tab drop\u0026#39;)\u0026lt;CR\u0026gt; nmap \u0026lt;silent\u0026gt; gy \u0026lt;Plug\u0026gt;(coc-type-definition) nmap \u0026lt;silent\u0026gt; gi \u0026lt;Plug\u0026gt;(coc-implementation) nmap \u0026lt;silent\u0026gt; gr \u0026lt;Plug\u0026gt;(coc-references) Hiển thị document cho function, biến: nnoremap \u0026lt;silent\u0026gt; K :call \u0026lt;SID\u0026gt;show_documentation()\u0026lt;CR\u0026gt; function! s:show_documentation() if (index([\u0026#39;vim\u0026#39;,\u0026#39;help\u0026#39;], \u0026amp;filetype) \u0026gt;= 0) execute \u0026#39;h \u0026#39;.expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) elseif (coc#rpc#ready()) call CocActionAsync(\u0026#39;doHover\u0026#39;) else execute \u0026#39;!\u0026#39; . \u0026amp;keywordprg . \u0026#34; \u0026#34; . expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) endif endfunction Highlight word chỗ con trỏ đang đứng: autocmd CursorHold * silent call CocActionAsync(\u0026#39;highlight\u0026#39;) ","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-7-autocomplete-code-nhu-the-nao/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-7-autocomplete-code-nhu-the-nao/","title":"[Phần 7] Vim là cái quái gì? - Autocomplete code như thế nào"},{"content":"Prettier Đây là 1 tính năng mà mình rất thích và rất hay xài trong các dự án, và cũng bắt buộc các thành viên trong công ty xài nó, vì nó tự động format code về cùng 1 định dạng, không cần phải suy nghĩ hoặc làm thủ công nữa, khá hữu ích khi làm việc nhóm nha 😋\nCOC.nvim có hỗ trợ prettier extension luôn, đây là cách cài đặt và cấu hình:\n  List extension trên mình đã có prettier rồi, nhưng nếu bạn muốn cài đặt riêng thì dùng lệnh này: :CocInstall coc-prettier\n  Update config cho COC setting như sau:\n Mở file coc-settings.json bằng cách: :CocConfig Thêm dòng này vào:  \u0026#34;coc.preferences.formatOnSaveFiletypes\u0026#34;: [ \u0026#34;css\u0026#34;, \u0026#34;markdown\u0026#34;, \u0026#34;typescript\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;javascriptreact\u0026#34;, \u0026#34;typescriptreact\u0026#34;, \u0026#34;json\u0026#34; ],  Lưu lại: :w    Cấu hình tự động format khi lưu file:\n  command! -nargs=0 Prettier :call CocAction(\u0026#39;runCommand\u0026#39;, \u0026#39;prettier.formatFile\u0026#39;) let g:prettier#autoformat = 1   Thiết lập file .prettierrc\n File này là file cấu hình prettier có thể đọc và thực hiện khi format  { \u0026#34;trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;arrowParens\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;printWidth\u0026#34;: 120 }   Bạn có thể tham khảo thêm config của .prettierrc tại đây: https://github.com/neoclide/coc-prettier.\n  Phần tiếp theo chúng ta sẽ cấu hình ESLint để đảm bảo code theo chuẩn, dễ dàng làm việc nhóm nhé.\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-8-prettier/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-8-prettier/","title":"[Phần 8] Vim là cái quái gì? - Prettier"},{"content":"ESLint Vâng, đây là 1 trong những thứ giúp chúng ta làm việc nhóm tốt hơn, đây là 1 extension giúp phân tích và báo warning các lỗi cơ bản trong khi code, giúp quá trình làm việc nhóm đỡ vất vả, đỡ phải xung đột giữa các thành viên trong nhóm.\nESLint không giúp bạn code nhanh hơn, hay code của bạn chạy nhanh hơn, mà nó giúp code dễ đọc hơn, dễ hiểu hơn, giúp quá trình debug dễ hơn trong tương lai, tránh bớt các bug không đáng có do quá trình code chúng ta mà ra.\nESLint cũng có thể giúp chúng ta fix tự động các lỗi ở mức dễ, như thiếu dấu ; hay format không đúng theo prettier quy đinh\u0026hellip;\nCài đặt ESLint COC.nvim cũng hỗ trợ cho chúng ta extension này luôn, chỉ việc cài đặt và sử dụng.\nTrong list extensions trên mình đã có eslint rồi, nhưng các bạn có thể cài đặt thủ công bằng lệnh này: :CocInstall coc-eslint\nCác bạn có thể tham khảo thêm tại đây: https://github.com/neoclide/coc-eslint\n","date":"2021-06-12T00:00:00Z","image":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-9-cai-dat-eslint-cho-vim/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_2.png","permalink":"https://laptrinhdeom.github.io/p/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-9-cai-dat-eslint-cho-vim/","title":"[Phần 9] Vim là cái quái gì? - Cài đặt ESLint cho Vim"}]