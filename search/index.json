[{"content":"HTML là gì?  HTML là 1 trong những ngôn ngữ cơ bản nhất khi bắt đầu học lập trình web. HTML viết tắt của Hypertext Markup Language, là ngôn ngữ dùng để xây dựng khung sườn, cấu trúc các thành phần trên website. Thường kết hợp với CSS và Javascript để tạo thành website hoàn chỉnh.  HTML có thể làm được gì?  Xuất bản tài liệu: bao gồm tiêu đề, văn bản, bảng tính, danh sách, ảnh, video\u0026hellip; Truy xuất thông tin: thông qua các liên kết , nút hoặc ô nhập liệu . Thiết kế các form: để thực hiện các giao dịch với người dùng, sử dụng để tìm kiếm thông tin, đặt chỗ, đặt hàng và thanh toán trực tuyến\u0026hellip; Hiển thị nhiều thông tin khác: Bao gồm bảng tính, âm thanh và các ứng dụng khác\u0026hellip;  Công cụ lập trình HTML: Có rất rất nhiều IDE/Editors mà các bạn có thể sử dụng để lập trình HTML/CSS, mình chỉ liệt kê 1 số IDE/Editor ở đây để các bạn có thể tham khảo và sử dụng nhé.\n1. VSCode: (Visual Studio Code)  Visual Studio Code \nƯu điểm:\n Miễn phí, do Microsoft phát triển và bảo trì. Nhẹ, ít tốn tài nguyên. Chạy đa nền tảng: Mac, Linux, Windows. Cài đặt dễ dàng, dễ sử dụng. Hệ thống plugins, extensions mạnh mẽ với hàng ngàn extensions để hỗ trợ giúp dễ dàng làm việc hơn.  Nhược điểm:\n Nhẹ nhưng vẫn tốn nhiều tài nguyên so với Sublime Text.  2. Sublime Text  Sublime Text \nƯu điểm:\n Nhẹ hơn VSCode, ít tốn tài nguyên so với IDE khác Chạy đa nền tảng: Mac, Linux, Windows. Cài đặt dễ dàng, dễ sử dụng. Hệ thống plugins, extensions mạnh mẽ.  Nhược điểm:\n Phải trả phí mới sử dụng tốt. Cài đặt plugins không thân thiện như VSCode.  3. Atom  Atom \nƯu điểm:\n Miễn phí, do Github phát triển và bảo trì. Chạy đa nền tảng: Mac, Linux, Windows. Giao diện đẹp mắt. Cài đặt dễ dàng, dễ sử dụng. Hệ thống plugins, extensions mạnh mẽ với hàng ngàn extensions.  Nhược điểm:\n Tốn nhiều tài nguyên hơn các IDE ở trên  ","date":"2021-10-23T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/html-co-ban-danh-cho-nguoi-chua-biet-gi-phan-1/cover_hua5eeaae6659d659d933b57ebda00f14e_46236_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.laptrinhdeom.xyz/bai-viet/html-co-ban-danh-cho-nguoi-chua-biet-gi-phan-1/","title":"HTML cơ bản - dành cho người chưa biết gì - Phần 1"},{"content":"Cấu trúc cơ bản của website  Cấu trúc cơ bản của website \nTrên đây là cấu trúc của 1 website thường thấy, nó sẽ bao gồm các thành phần như:\n Header: là thành phần chứa hình Logo, tên website, giới thiệu về website, hình ảnh giới thiệu về các hoạt động của chủ website. Menu: là thành phần chứa danh sách các liên kết đến các trang con của website, bao gồm: trang chủ, danh sách sản phẩm, danh sách bài viết, danh mục, liên hệ, giới thiệu\u0026hellip; Sidebar: là thành phần chứa menu dọc, bao gồm danh sách danh mục, các sản phẩm/bài viết nổi bật, bộ lọc sản phẩm/bài viết\u0026hellip; Content: là thành phần chứa nội dung chi tiết của website, nội dung của trang con bao gồm danh sách sản phẩm/bài viết của danh mục, chi tiết sản phẩm/bài viết, form nhập các thông tin liên hệ, bài viết giới thiệu\u0026hellip; Footer: là thành phần chứa các thông tin khác về website, như liên kết giống menu chính, liên kết đến các mạng xã hội facebook, twitter\u0026hellip;  Cấu trúc cơ bản HTML: Dưới đây là 1 cấu trúc cơ bản của 1 file HTML:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Học lập trình HTML cơ bản dành cho người chưa biết gì\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;HTML cơ bản\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Học lập trình HTML tại Lập Trình Dễ Òm.xyz\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Cấu trúc HTML sẽ bao gồm các thẻ như sau:\n \u0026lt;!DOCTYPE\u0026gt;: là thẻ khai báo loại tài liệu của file này, ví dụ Document Type = HTML, nghĩa là loại tài liệu là HTML. \u0026lt;html\u0026gt;:  Là thẻ cơ bản nhất, bắt buộc phải có, chức năng để chứa các thẻ con chứa nội dung của website Mỗi file HTML chỉ có 1 cặp thẻ \u0026lt;html\u0026gt;, \u0026lt;/html\u0026gt;   \u0026lt;head\u0026gt;: là thẻ đại diện cái đầu của website, thường thẻ này chứa các thẻ con với nội dung KHÔNG hiển thị lên website, ví dụ:  `:** để hiển thị lên thanh tiêu đề của trình duyệt. `:** để nhúng file CSS vào website. `:** để viết code javascript hoặc nhúng file javascript vào website   \u0026lt;body\u0026gt;: là thẻ chứa các thẻ con khác để chứa nội dung hiển thị lên website, tất cả nội dung website sẽ phải để vào thẻ   Các loại thẻ HTML Có 2 loại thẻ HTML chính:\n  Thẻ chứa:\n Là loại thẻ có thẻ mở và thẻ đóng, và có chứa nội dung/thẻ bên trong nó, ví dụ:  \u0026lt;h1\u0026gt;HTML cơ bản\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Lập trình dễ òm.xyz\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;Lập trình dễ òm.xyz\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   Thẻ rỗng:\n Là loại thẻ chỉ có thẻ mở, không có thẻ đóng. Chỉ chứa nội dung bên trong thuộc tính của thẻ. Các loại thẻ rỗng:  \u0026lt;img /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;input /\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;link /\u0026gt;   Các thẻ phổ biến:  \u0026lt;div\u0026gt;: thẻ phổ biến và thường sử dụng nhất, thẻ này có thể chứa nội dung văn bản hoặc các thẻ khác bên trong. \u0026lt;h1\u0026gt; - \u0026lt;h6\u0026gt;:  Là các thẻ để hiển thị tiêu đề cho trang con   Tùy mỗi loại văn bản theo thiết kế mà chúng ta sẽ sử dụng hay \u0026hellip;  \u0026lt;h1\u0026gt;HTML cơ bản\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Học lập trình dễ òm\u0026lt;/h2\u0026gt;  \u0026lt;p\u0026gt;:  Viết tắt của Paragraph, là đoạn văn bản. Là thẻ để hiển thị văn bản dài bên trong   \u0026lt;table\u0026gt;:  Là thẻ để hiển thị dữ liệu dạng bảng, có hàng, cột như excel, ví dụ:   Phải kết hợp với các thẻ con , , , mới hiển thị được dữ liệu   \u0026lt;input\u0026gt;:  Là thẻ để hiển thị ô nhập liệu, để người dùng nhập các thông tin như tên, tuổi, số điện thoại\u0026hellip; Ví dụ:     \u0026lt;a\u0026gt;:  Thẻ này để hiển thị 1 liên kết đến 1 trang con khác, hoặc 1 website khác. Thường dùng trên các menu, danh mục, sản phẩm\u0026hellip; Ví dụ:     \u0026lt;button\u0026gt;:  Là thẻ để hiển thị nút nhấn, để người dùng tương tác sau khi nhập liệu. Có thể là nhấn nút để gửi email, gửi liên hệ, đồng ý thanh toán\u0026hellip; Ví dụ:     \u0026lt;img\u0026gt;:  Là thẻ để hiển thị hình ảnh lên website. Đường dẫn ảnh sẽ để vào thuộc tính src của thẻ   \u0026lt;img src=\u0026#34;banner.jpg\u0026#34; alt=\u0026#34;Hình banner\u0026#34; /\u0026gt;  \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;:  2 thẻ này dùng để hiển thị dữ liệu dạng danh sách dọc/ngang. Danh sách sẽ thường là menu, danh sách sản phẩm, danh mục\u0026hellip; Ví dụ:  ,      *Trên đây là một số thẻ HTML phổ biến, thường sử dụng trong website, còn rất nhiều thẻ khác, nhưng mình không giới thiệu ở đây hết nhé. Chúng ta sẽ từ từ tìm hiểu dần qua các ví dụ và phần CSS nhé.\n Tiếp đến, các bạn sẽ học về CSS cơ bản - dành cho người chưa biết gì nhé, để có thể hiểu và lập trình website hoàn chỉnh.*\n  ","date":"2021-10-23T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/html-co-ban-danh-cho-nguoi-chua-biet-gi-phan-2/cover_hua5eeaae6659d659d933b57ebda00f14e_46236_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.laptrinhdeom.xyz/bai-viet/html-co-ban-danh-cho-nguoi-chua-biet-gi-phan-2/","title":"HTML cơ bản - dành cho người chưa biết gì - Phần 2"},{"content":"","date":"2021-07-03T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-quy-tat-viet-ham-function/cover_hu340e4aace18e22992457c1a03afbcc3c_126792_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-quy-tat-viet-ham-function/","title":"[Clean Code là gì] Quy tắt viết hàm (function)"},{"content":"[2] Quy tắc với biến (variable) Thật sự việc suy nghĩ đặt tên biến là 1 trong những việc khá mất thời gian, dễ gây bực bội nhất 😄.\nĐôi khi phải vò đầu bức tóc để tìm ra 1 tên biến sao cho phù hợp, dễ đọc, dễ hiểu nhất.\nVậy phải làm sao để đặt tên biến cho phù hợp nhỉ, các bạn đọc các quy tắc dưới đây để có cách đặt tên biến sao cho chuẩn hóa nhé.\n🌟 Tên biến phải có nghĩa: Vậy \u0026ldquo;có nghĩa\u0026rdquo; là như thế nào? Có nghĩa thì phải đáp ứng các nguyên tắc sau đây:\n Tên biến phải trả lời được tất cả các câu hỏi lớn. Nó phải nói với bạn được là:  Tại sao nó tồn tại? Làm thế nào để sử dụng biến này? Loại dữ liệu của nó là gì? (ý này là tùy chọn, không bắt buộc, nhưng khuyến khích)   Nếu tên biến phải thêm comment để hiểu được, thì không đáp ứng được ý nghĩa dễ hiểu.  Ví dụ:\n// Bad int d; // elapsed time in days  // Good int elapsedTimeInDays; ----------------------------------------------------------- // Bad var product = products.filter(item =\u0026gt; item.active); // =\u0026gt; Nhìn tưởng có 1 product mà thôi.  // Good var activeProducts = products.filter(item =\u0026gt; item.active); /* =\u0026gt; Nhìn tên biến ta hiểu ngay là biến chứa 1 danh sách các products active = true. */ 🌟 Tên biến phải dễ dàng tìm kiếm: Có 1 sự thật là khi bạn làm dự án:\n Bạn hay tập trung vào để làm các tính năng chạy được, chạy ngon lành trước. Không quan tâm đến các cách clean code, đặt tên biến sao cho dễ hiểu. Ví dụ cách viết như sau:  for (int j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } Đến 1 ngày, khách hàng yêu cầu thay đổi 1 vài chỗ theo ý họ:\n Bạn mò mẫm trong đống code cũ của bạn 😔 Bây giờ phải ngồi nhớ lại code này nó đang làm gì ta?  Tại sao lại là lặp từ 0 đến 34? t là gì? s là gì? Tại sao lại nhân với 4 rồi chia cho 5?   Và bạn mặc kệ, sửa cho chạy tiếp đã.  Đến 2 năm sau, khách hàng lại yêu cầu bạn thay đổi chỗ này nữa thì sao 🤭\n Bạn không nhớ nó nằm chỗ nào trong đống code hỗn độn 😆 Bạn không biết làm sao để tìm kiếm ra chỗ code này cả. Bạn chỉ được 1 thông tin là đổi 34 thành 20. Bạn thử search toàn bộ dự án với số 34 🥴. Kết quả là khoảng hơn 1000 kết quả với số 34 🙇‍♂️.  Thật sự là ác mộng phải không 🥶, mình đã từng gặp tình trạng này khi tiếp nhận dự án từ người khác, không biết phải bắt đầu từ đâu luôn 🥵\nVậy chỗ ở trên ta có thể viết lại như sau:\nint realDaysPerIdealDay = 4; const int WORK_DAYS_PER_WEEK = 5; int sum = 0; for (int = 0; j \u0026lt; NUMBER_OF_TASKS; j++) { int realTaskDays = taskEstimate[j] * realDaysPerIdealDay; int realTaskWeeks = (realdays / WORK_DAYS_PER_WEEK); sum += realTaskWeeks; } Nhìn dễ hiểu khủng khiếp, không thể nào tin được mình đã có thể code được như vậy 😍\nVậy hãy cố gắng viết code sao cho dễ đọc, dễ hiểu nhé các bạn 😉\n🌟 Tên biến phải đọc được (phát âm được): Phát đọc (phát âm) được nghĩa là ta có thể đọc nó thành lời.\nVí dụ dayOfBirth, firstName, lastName\u0026hellip; chứ không phải là: daOBth, fNm, lNa\u0026hellip;\nCác bạn cũng thấy được sự khác nhau ở trên đúng rồi, khác nhau lắm.\nNó khác chỗ khi chúng ta có thể đọc được tên biến dễ dàng thì chúng ta có thể hiểu được ngay ý nghĩa, mục đích của tên biến đó để làm gì, cách sử dụng nó thế nào, loại dữ liệu của nó\u0026hellip;\nVí dụ:\n// Bad var tmStmp = Date.now(); // Good var currentTimeStamp = Date.now(); ------------------------------------------------------- // Bad String msg = \u0026#39;Message content\u0026#39;; // Good String message = \u0026#39;Message content\u0026#39;; 🌟 Tên biến phải thể hiện được giá trị chứa trong đó: Ý nãy phía trên mình có giải thích, thật ra mục đích của việc này là:\n Bớt thời gian suy nghĩ của chúng ta khi đọc tên biến. Đọc vô là hiểu liền:  Biến đó để làm gì. Dùng nó thế nào: gán string hay int hay array\u0026hellip; Nó chứa gì trong đó :v   Để thời gian suy nghĩ về biến ta hay suy nghĩ về những cái khác, như thuật toán để đáp ứng được yêu cầu tính năng mới\u0026hellip;  Ví dụ:\n// Bad const MINUTE = 10; // Good const MAX_EXECUTE_MINUTES = 10; ----------------------------------------------- // Bad var a = 50; // Good var numberOfObjectInClass = 50; 🌟 Tên biến theo chuẩn camelCase: Tùy vào ngôn ngữ mà bạn sử dụng có quy ước đặt tên biến riêng, nhưng đa phần các ngôn ngữ đề khuyên nên đặt tên biến theo chuẩn camelCase.\nCách đặt tên biến camelCase tương tự như cách viết của chữ camelCase:\n Chữ đầu tiên của từ đầu tiên thì viết thường Chữ đầu tiên của các từ phía sau thì viết hoa.  Ví dụ:\nconst numberOfObjectInClass = 100; var firstName = \u0026#39;Nguyen\u0026#39;; int productQuantity = 10; 🌟 Nên ưu tiên dễ hiểu hơn là ngắn gọn: Tất nhiên, nếu có thể thì nên đặt tên ngắn gọn vẫn hơn, nhưng phải dễ hiểu nhé 🙂\nNếu trường hợp bạn không nghĩ được tên nào vừa ngắn gọn, vừa dễ hiểu thì nên đặt tên dài 1 chút nhưng có thể hiểu được thì nên ưu tiên tên dài nhé 😉\nVí dụ:\n// Bad const WORK_DAYS = 5; // Good, đọc thấy rõ nghĩa, dễ hiểu hơn. const WORK_DAYS_PER_WEEK = 5; // Bad const TIME_FORMAT = \u0026#39;HH:mm\u0026#39;; // Good const DEFAULT_TIME_FORMAT = \u0026#39;HH:mm\u0026#39;; const STORE_TIME_FORMAT = DEFAULT_TIME_FORMAT; const TIME_PICKER_FORMAT = \u0026#39;hh:mm\u0026#39;; 🌟 Hạn chế viết sai chính tả: Lỗi khá phổ biến của các dev mình là viết tên biến bằng tiếng Anh, nhưng lại sai chính tả. Hậu quả của việc sai chính tả sẽ như sau:\n Khó khăn trong việc đọc hiểu ý nghĩa của biến. Khó tìm kiếm về sau. Khó chịu cho đồng nghiệp khi làm việc chung.  Vì thế nên chúng ta dành chút thời gian để tra từ điển, hoặc viết thử ý nghĩa trên google translate xem có đúng nghĩa chưa nhé.\nViệc đặt tên biến mình hay làm là:  Suy nghĩ về ý nghĩa của tên biến bằng tiếng Việt. Dịch các từ đó sang tiếng Anh, tra xem đúng ngữ pháp chưa. Gõ các từ tiếng Anh đó lên Google Translate xem đúng nghĩa chưa. Chuyển qua lại giữa tiếng Anh ↔ tiếng Việt xem đúng ngữ pháp chưa (tương đối thôi) Ghép các từ đó lại thành 1 biến hoàn chỉnh.  -\u0026gt; Phần tiếp theo mình sẽ nói chi tiết về cách quy tắc với hàm (function) nhé.\nPhần tiếp theo \u0026raquo; [Clean Code là gì] Quy tắt viết hàm (function)\n","date":"2021-07-03T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-quy-tat-voi-bien-variable/cover_hu340e4aace18e22992457c1a03afbcc3c_126792_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-quy-tat-voi-bien-variable/","title":"[Clean Code là gì] Quy tắt với biến (variable)"},{"content":"Clean Code là gì? Lợi ích của Clean Code là gì?  Clean code is code that is easy to understand and easy to change.\n Tạm dịch: Clean code là code mà nhìn vào đó chúng ta dễ đọc, dễ hiểu và dễ dàng thay đổi nó khi cần thiết.\n Trải qua hơn 10 năm code, mình thật sự thấy Clean code là rất quan trọng và rất cần thiết. Việc viết code clean không phải chuyện dễ dàng, không phải 1-2 ngày chúng ta có thể làm được. Clean code là 1 kỹ năng, cần được luyện tập, cần có thời gian để trau dồi nó. Bởi vì Clean code không có 1 quy ước nào cụ thể cho từng ngôn ngữ, hầu hết là những lời khuyên của các chuyên gia, các người đi trước khuyên chúng ta nên làm thế này, làm thế kia\u0026hellip; Ở các bài tiếp theo mình sẽ trình bày chi tiết các quy tắc về Clean code cho tên biến (variable), hàm, file, folder\u0026hellip;  Vậy lợi ích của Clean code là gì vậy nhỉ? ✨ Trước tiên ta nhìn nhược điểm của nó là gì đã 😌\n Khi học và áp dụng các quy tắc Clean code thì sẽ làm chúng ta mất nhiều thời gian hơn. Bởi vì cần học, thực hành các quy tắc Cần thời gian để suy nghĩ về các quy tắc, tên biến, tên hàm để đúng theo các quy tắc. Chán nản, bực bội khi phải bó buộc mình vào 1 quy tắc cứng nhắc, mất thời gian để đặt tên cho đúng.   nhuoc-diem-clean-code.png \n✨ Giờ đến xem xét các lợi ích của Clean code thế nào nhé 😉\n uu-diem-clean-code.png \n✨ Các bạn nhìn hình thì sẽ chắc cũng hiểu, giải thích chi tiết như sau:\n Code sạch thì đẹp: đúng thế, code sạch thì nhìn đẹp đúng không ✌️, cái gì cũng sạch thì sẽ đẹp hơn 😅. Code đẹp thì sẽ dễ đọc: khi nhìn vô code đẹp thì mình sẽ có hứng thú đọc hơn là nhìn vô 1 đống bùi nhùi 😄 Code dễ đọc thì sẽ dễ hiểu hơn: chắc chắc rồi, hơn là nhìn vô code xấu, khó đọc thì sẽ làm cho mình không muốn đọc, không muốn nhìn thì tất nhiên khó hiểu hơn nhiều rồi 🤭 Code đọc dễ hiểu thì dễ bảo trì, dễ fix bugs: chắc hẳn ai cũng từng fix bugs rồi, bugs của chính mình, và bug của người khác để lại 😆.  Fix bug của mình thì không có lời nào để nói rồi, mình gây ra thì mình phải hốt 😄 Nhưng fix bugs của người khác thì rất khó chịu, nếu code khó đọc, khó hiểu nữa thì\u0026hellip; 😒, chắc điên luôn quá, haha.   Code sạch thì dễ mở rộng về sau, tăng tính thừa kế, tái sử dụng cao, các tính năng khác sẽ dễ dàng phát triển mở rộng hơn. Code sạch thì dễ viết test: unit test, automated test hơn là code xấu, code khó nhìn, người viết test có thể là 1 người khác, khi nhìn vô code không hiểu gì thì họ cũng rất khó để viết test cho hệ thống, đúng không nào. Cuối cùng, tất cả các yếu tố trên sẽ làm cho mình dev nhanh hơn về sau, giai đoạn release sản phẩm sẽ nhanh hơn, ít bugs vặt hơn, làm khách hàng sẽ hài lòng.  Khi khách hàng hài lòng thì họ sẽ tin tưởng chúng ta, và sẽ gắn bó, tìm đến chúng ta khi có dự án mới. Khi chúng ta có nhiều dự án, nhiều việc làm thì lương chúng ta sẽ theo đó cũng tăng lên thôi 😉.    Khá dễ hiểu phải không nào.\nPhần tiếp theo chúng ta sẽ nghiên cứu về các quy tắt đặt tên biến (variable) thế nào để đảm bảo Clean nhé.\nPhần tiếp theo \u0026raquo; [Clean Code là gì] Quy tắt với biến (variable)\n","date":"2021-06-17T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-loi-ich-cua-clean-code-la-gi/cover_hu340e4aace18e22992457c1a03afbcc3c_126792_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.laptrinhdeom.xyz/bai-viet/clean-code-la-gi-loi-ich-cua-clean-code-la-gi/","title":"Clean Code là gì? Lợi ích của Clean Code là gì?"},{"content":"✅ JWT là gì vậy nhỉ?  Nó là viết tắt của JSON Web Token JWT là 1 chuỗi JSON được mã hóa, nó trông thế này đây:  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ. SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c  Các bạn copy chuỗi trên, xong vào đây dán vào xem thử nó thế nào nhé 🙂 JWT là phương thức để giao tiếp giữa Back-End và Front-End (Stateless). Nghĩa là Back-End chỉ tạo ra 1 chuỗi token cho user khi đăng nhập, và trả chuỗi này về Front-End, Back-End hoàn toàn không lưu trữ token này trên server. Cơ chế hoạt động giống như hình dưới đây:   01-jwt.png \n✅ Tại sao JWT lại sinh ra?  Trước đây chúng ta lập trình web, lúc đó điện thoại di động chưa phổ biến, nên không có app cho điện thoại di động, vì thế chỉ sử dụng cơ chế xác thực người dùng bằng Session Based. Session Based là gì?   Các bạn xem hình dưới đây:\n 02-session-based.png \n  Các bạn thấy nó cũng tương tự với JWT, nhưng khác nhau chỗ không xài JWT mà xài cookie phải không?\n  Đúng vậy nó sẽ dùng cookie để định danh người dùng, và sessionId sẽ được lưu trữ trên phía server, ở dạng text.\n  Để biết người dùng đã đăng nhập hay chưa, và id của user là gì\u0026hellip;\n   Sau khi có website chạy với session based rồi, giờ đột nhiên có nhu cầu thêm 1 app cho điện thoại nữa, vậy phải làm thế nào? App trên điện thoại đâu có cookie để xài sessionId như web được??? Cuối cùng, 1 cơ chế mới được định nghĩa ra để giải quyết vấn đề này, đó là dùng Json Web Token. Nó mang chữ web thôi, nhưng xài ở đâu cũng được.  ✅ Trong chuỗi JWT có những gì vậy? JWT có 3 phần: Header, Payload và Signature, chi tiết các bạn có thể xem hình dưới:\n  Header, trong header sẽ có 2 thuộc tính:\n alg: thuật toán mã hoá của JWT, thường sẽ là HS256 typ: loại token, thường sẽ là JWT    Payload: là nơi chứa các data cần thiết để định danh user, ví dụ user id, email, và các thông tin khác thường dùng như sau:\nJWT Payload keys\n Các thông tin các các bạn có thể tham khảo ở đây: https://en.wikipedia.org/wiki/JSON_Web_Token#Standard_fields    Signature: là chữ ký điện tử của JWT, dùng để verify JWT này có được tạo ra đúng không, dựa trên thuật toán mã hoá như sau:\n base64UrlEncode(header) base64UrlEncode(payload) HMACSHA256(#1, #2, secretKey)   secretKey là chuỗi ngẫu nhiên được lưu trữ trên server secretKey dùng để tạo ra Signature cho JWT và verify JWT có hợp lệ hay không.  var signature = HMACSHA256( base64UrlEncode(header) + \u0026#34;.\u0026#34; + base64UrlEncode(payload), secret ); var jwt = base64UrlEncode(header) + \u0026#34;.\u0026#34; + base64UrlEncode(payload) + \u0026#34;.\u0026#34; + signature;   ✅ JWT hoạt động thế nào vậy?  Cơ chế JWT khá đơn giản:  Server sau khi xác thực đúng user thì trả về 1 chuỗi mã hoá cho client Client lưu lại mã này ở local, có thể lưu ở cookie, localStorate, AsyncStorage, SharedPreferences... hay bất cứ đâu bạn muốn mà có thể truy cập nhanh để lấy giá trị là được. Mỗi request sau lên server thì set JWT vào header trước khi gửi lên. Server lấy JWT từ header, verify coi thử JWT có hợp lệ không, hợp lệ thì cho vào, không thì đá lỗi 401 về cho client.   Các bạn có thể tham khảo ở hình dưới sẽ chi tiết hơn:   03-jwt-workflow.png \n✅ Làm thế nào để verify JWT có hợp lệ không nhỉ?  Để verify 1 chuỗi JWT có hợp lệ hay không thì nó sẽ thế này:   Đầu tiên, server sẽ giải mã (decode) chuỗi JWT của header và payload ra, trong payload sẽ có các thông tin như:\n iss: Người tạo là ai nbf: Not before, token này có tới thòi điểm hợp lệ chưa exp: Expiration time, token này có hết hạn chưa    Server kiểm tra các thông tin trên, nếu bất cứ thông tin nào không hợp lệ, thì sẽ trả lỗi ra.\n  Tiếp theo server sẽ thử hash header và payload với thuật toán tạo JWT trên để so sánh với Signature có giống không, nếu không giống thì cũng trả ra lỗi.\nvar signature = HMACSHA256( base64UrlEncode(header) + \u0026#34;.\u0026#34; + base64UrlEncode(payload), secret );   Các bạn thử tạo theo thuật toán này xem có ra được chuỗi JWT không nhé 😉\n    ✅ Thử tạo 1 chuỗi JWT bằng NodeJS như thế nào?  Bây giờ chúng ta thử dùng NodeJS tạo ra 1 chuỗi JWT thử xem nhé.   Bạn tạo 1 file create-jwt.js\n  Tiếp tục bạn chạy lệnh: npm init, xong làm theo hướng dẫn trên terminal:\npackage name: (demo-jwt) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to /home/username/demo-jwt/package.json: { \u0026#34;name\u0026#34;: \u0026#34;demo-jwt\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Is this OK? (yes)   Giờ bạn chạy tiếp lệnh này: npm install jsonwebtoken\n  Xong tạo file create-jwt.js với nội dung sau:\nvar jwt = require(\u0026#39;jsonwebtoken\u0026#39;); var token = jwt.sign({ sub: \u0026#39;e271a680-3e55-45bd-bbcf-aa4576ac835f\u0026#39;, iss: \u0026#39;JWT Demo\u0026#39;, iat: Math.floor(Date.now() / 1000) - 30, data: { test: \u0026#39;abc\u0026#39; } }, \u0026#39;secretKey@123\u0026#39;, { expiresIn: \u0026#39;1m\u0026#39; }); console.log(\u0026#39;token\u0026#39;, token);   Vậy là xong phần tạo JWT với nodejs rồi, giờ chạy thử: node create-jwt.js\n  Bạn sẽ thấy kết quả như sau:\ntoken eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiJlMjcxYTY4MC0zZTU1LTQ1YmQtYmJjZi1hYTQ1NzZhYzgzNWYiLCJpc3MiOiJKV1QgRGVtbyIsImRhdGEiOnsidGVzdCI6ImFiYyJ9fQ. 3ibxGqZi7n-3MjwbuKAYBkFYVwf59qUZt6Q6nbgp_wI   Bạn thử copy quăng vô jwt.io xem thử được thông tin gì nhé 😎\n    ✅ Thử verify chuỗi JWT với nodejs nào.  Sau khi tạo xong JWT thì mình verify chuỗi xem hợp lệ hay không nhé.   Tạo file verify-jwt.js với nội dung sau:\nvar token = \u0026#39;...\u0026#39;; // Thay token ở trên vào chỗ dấu ... hen.  try { var decoded = jwt.verify(token, \u0026#39;secretKey@123); console.log(\u0026#39;token data\u0026#39;, decoded); } catch(err) { console.log(\u0026#39;Không thể verify token này\u0026#39;) }   Bạn chạy thử node verify-jwt.js xem kết quả thế nào nhé 😇\n    ✅ Thử hack JWT có được không?  Bây giờ mình có tình huống thế này:  Bạn tạo 1 JWT ở trên Copy dán vào jwt.io Copy phần Signature để giữ lại đâu đó, có thể dán vào IDE để giữ lại tí mình có việc dùng lại nhé 😂 Sửa lại payload phần sub thành 1 id của admin jwt.io tự tạo lại 1 chuỗi JWT mới, Signature hoàn toàn khác. Copy chuỗi mới, dán vào file verify-jwt.js và chạy thử.   Tình huống khác, tiếp theo tình huống trên nhé:  Copy Signature lúc nãy giữ lại. Dán vào phần `    ✅ Ưu, nhược điểm của JWT là gì? (Đang cập nhật)\n✅ Làm sao để logout 1 user đang xài JWT hợp lệ trước thời hạn?  Khi sử dụng Session based thì sessionId được lưu trên server, khi user logout thì chúng ta chỉ việc xóa sessionId trên server là xong. Nhưng đang dùng JWT, server không lưu lại, thì làm sao để logout user nhỉ?  Không có cách nào logout 1 user khi họ đang sử dụng JWT, nghĩa là cho dù user đã nhấn nút logout rồi, nhưng lấy JWT đó vẫn request lên server bình thường nhé, server không hề biết được user đã logout rồi. Vậy cách nào để từ chối các request sau khi user đã logout? Chúng ta có 1 cách là:  Khi user logout, gửi token lên server với request logout. Server lưu lại JWT đã logout trên Redis hoặc 1 nơi nào đó. Bất cứ request nào lên server thì server kiểm tra JWT có trên chỗ lưu JWT đã logout hay không, nếu có thì từ chối request, đá lỗi 401 Unauthorized về cho client.      🐗 Vậy là xong toàn bộ kiến thức về JWT, bạn có thể làm thử tất cả ví dụ trên nhé, để nắm kiến thức kỹ hơn.\n❔ Nếu các bạn có thắc mắc gì, bất cứ gì chưa rõ, cứ comment để mình giải thích kỹ hơn nhé🙂\nCảm ơn các bạn đã theo dõi bài viết.\n","date":"2021-06-14T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/jwt-la-gi-tat-tan-tat-ve-jwt/cover_hu6769fb9f126c77eafe45523142ac731e_39456_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/jwt-la-gi-tat-tan-tat-ve-jwt/","title":"JWT là gì? Tất tần tật về JWT"},{"content":"Về terminal thì sao? Khi sử dụng VSCode, chúng ta thường có 1 terminal phía dưới để dễ làm việc hoặc theo dõi log khi code.\nGiải pháp trên Vim thì mình có 2 giải pháp:\n Có Floatterm của COC.nvim khá hay, nó là 1 terminal nổi trên vim, khi nào cần thì mở lên gõ, xong thì đóng lại. Dùng tmux, mình thích cách này hơn, dùng tmux chia nhiều khung ra dễ nhìn và thao tác hơn, bản thân tmux chia khung khá thông minh, do đường viền rất nhỏ, nên tận dụng tối đa khả năng hiển thị những thứ cần thiết. Nó trông như vậy:   tmux.png \nNếu màn hình lớn khoảng 24 inch thì chia vậy rất ngon để code đó các bạn 😻\nNhư vậy chúng ta đã hoàn thành toàn bộ cách cấu hình, cài đăt, cấu hình để Vim có thể làm 1 IDE chính để code, và code trên Vim thật sự rất hào hứng, rất vui các bạn ạ, hãy thử nhé :)\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-10-terminal-cho-vim-thi-sao/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-10-terminal-cho-vim-thi-sao/","title":"[Phần 10] Vim là cái quái gì? - Về termial trong Vim thì sao nhỉ?"},{"content":"Vim là quái gì vậy? Vim là 1 IDE được rất nhiều người sử dụng trên thế giới, Vim có sẵn trên các nền tảng, rất gọn nhẹ, khó sử dụng, nhưng khi đã xài quen rồi thì nghiện luôn 😍\nVim sau khi cấu hình thì có thể sử dụng như 1 IDE mà các bạn thường sử dụng như VSCode, Sublime Text, Atom\u0026hellip;\nTại sao nên dùng Vim để code?  [Gọn, nhẹ] Xấu cực đỉnh, chính vì thế nên rất gọn nhẹ, thời gian khởi động của Vim cực kì nhanh. [Tùy biến] Khả năng tùy biến cực cao, mặc định thì nó khá xấu, nhưng sau khi tùy biến lại thì sẽ rất đẹp. [Plugins, Extensions] Rất nhiều, hỗ trợ hầu hết các ngôn ngữ về code highlight và autocomplete, dễ dàng cài đặt và cấu hình. [Cộng đồng] Cộng đồng cực lớn, cần gì thì sẽ tìm được hỗ trợ rất nhiều trên mạng, không phải lo. [Tốc độ làm việc] Tốc độ làm việc với Vim rất nhanh, tất cả thao tác khi code với Vim đều trên bàn phím, thậm chí không cần đến chuột, nên mọi thứ rất nhanh. [Tiện dụng] Dễ dàng chuyển đổi giữa các thiết bị máy tính, giữa các hệ điều hành chỉ cần file .vimrc là xong, rất đơn giản, không cần cài lại thủ công từng plugin sau khi qua môi trường mới. [Cảm giác] Cảm giác code với Vim rất ngầu, pro, đỉnh, nên sẽ dễ gây nghiện 🤤, có hứng thú khi code hơn.  Nhược điểm của Vim  Khó tiếp cận, khó làm quen, đòi hỏi phải có sự kiên nhẫn và quyết tâm cao, nếu không thì rất dễ nản. Rất nhiều phím tắt cần phải nhớ, phải tập làm quen nhiều lần mới nhớ được.  Phím tắt trong Vim thường dùng:  Di chuyển:  Dùng 4 phím h,j,k,l để di chuyển qua trái, xuống, lên, qua phải gg để di chuyển nhanh lên dòng số 1 Shift + g để di chuyển xuống dưới cùng của file ^ đề về đầu dòng $ để về cuối w để đi tới 1 từ (word) b để đi lùi 1 từ   Chế độ Insert:  i để đưa con trỏ về chế độ Insert ngay tại vị trí con trỏ Shift + A để con trỏ về chế độ Insert ở cuối dòng a để đưa con trỏ về chế độ Insert tại ngay sau con trỏ 1 ký tự   Chế độ Delete:  dw để delete tới 1 từ db để delete lùi 1 từ cw để delete tới 1 từ và đưa con trỏ về chế độ Insert cb để delete lùi 1 từ và đưa con trỏ về chế độ Insert di\u0026quot; xóa tất cả nội dung trong cặp dấu \u0026quot;\u0026quot;, các bạn gõ di và ký tự muốn xóa đến đó nhé: di), di]  Ví dụ \u0026quot;Đây là nội dung\u0026quot; thì khi gõ di\u0026quot; thì chỉ còn lại \u0026quot;\u0026quot; Ví dụ 2: function convert(value: string, convertTo: number) {}, khi trỏ tại chỗ value và gõ di) thì còn lại: function convert() {}   ci\u0026quot; tương tự như di\u0026quot; chỉ khác sau khi xóa thì đưa con trỏ về chế độ Insert luôn nhé.    Demo Vim mình đang xài:  vim-demo.png \nPhần tiếp theo ta sẽ cùng cài đặt Vim package manager để cài đặt plugin này nọ :)\nXem tiếp \u0026raquo; [Phần 2] Vim là cái quái gì? - Cài đặt Vim-Plug\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-1/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-1/","title":"[Phần 1] Vim là cái quái gì?"},{"content":"Cài đặt Vim để code giống IDE Vim-Plug Vim có rất nhiều Package Manager như:\n Vim Plug Vundle Pathogen Dein.vim Janus  Nhưng Vim Plug có vẻ được rất nhiều người sử dụng, có lượt bình chọn khá cao, nên mình cũng xài Vim Plug luôn 🙂\nCác lý do nên xài Vim Plug:\n Dễ dàng cài đặt, cấu hình và sử dụng Cài plugin từ bất cứ đâu, có thể từ folder, từ git, từ tên plugin\u0026hellip; Dễ dàng gỡ bỏ plugins mình không cần xài nữa Cài đặt plugin khá nhanh Hỗ trợ 3 hệ điều hành thường sử dụng: Linux, MacOS, Windows  Cài đặt Vim Plug: Rất đơn giản, chỉ 1 dòng lệnh curl là cài xong rồi 🤤\ncurl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Cấu hình Vim Plug:  Tạo file .vimrc trong thư mục user của hệ điều hành, thường để trong dấu ~ như thế này: ~/.vimrc Để các plugin cần cài đặt bên trong khối này:  call plug#begin() ... call plug#end()   Các plugin cần bắt đầu với từ khóa Plug\n  Ví dụ:\ncall plug#begin(\u0026#39;~/.vim/plugged\u0026#39;)  \u0026#34; Make sure you use single quotes \u0026#34; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug \u0026#39;junegunn/vim-easy-align\u0026#39; \u0026#34; Any valid git URL is allowed Plug \u0026#39;https://github.com/junegunn/vim-github-dashboard.git\u0026#39; \u0026#34; Multiple Plug commands can be written in a single line using | separators Plug \u0026#39;SirVer/ultisnips\u0026#39; | Plug \u0026#39;honza/vim-snippets\u0026#39; \u0026#34; On-demand loading Plug \u0026#39;scrooloose/nerdtree\u0026#39;, { \u0026#39;on\u0026#39;: \u0026#39;NERDTreeToggle\u0026#39; } Plug \u0026#39;tpope/vim-fireplace\u0026#39;, { \u0026#39;for\u0026#39;: \u0026#39;clojure\u0026#39; } \u0026#34; Using a non-default branch Plug \u0026#39;rdnetto/YCM-Generator\u0026#39;, { \u0026#39;branch\u0026#39;: \u0026#39;stable\u0026#39; } \u0026#34; Using a tagged release; wildcard allowed (requires git 1.9.2 or above) Plug \u0026#39;fatih/vim-go\u0026#39;, { \u0026#39;tag\u0026#39;: \u0026#39;*\u0026#39; } \u0026#34; Plugin options Plug \u0026#39;nsf/gocode\u0026#39;, { \u0026#39;tag\u0026#39;: \u0026#39;v.20150303\u0026#39;, \u0026#39;rtp\u0026#39;: \u0026#39;vim\u0026#39; } \u0026#34; Plugin outside ~/.vim/plugged with post-update hook Plug \u0026#39;junegunn/fzf\u0026#39;, { \u0026#39;dir\u0026#39;: \u0026#39;~/.fzf\u0026#39;, \u0026#39;do\u0026#39;: \u0026#39;./install --all\u0026#39; } \u0026#34; Unmanaged plugin (manually installed and updated) Plug \u0026#39;~/my-prototype-plugin\u0026#39; \u0026#34; Initialize plugin system call plug#end()   Phần tiếp theo chúng ta sẽ bắt đầu làm đẹp Vim :v\nXem tiếp \u0026raquo; [Phần 3] Vim là cái quái gì? - Làm đẹp Vim với OneDark\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-2-vim-plug/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-2-vim-plug/","title":"[Phần 2] Vim là cái quái gì? - Cài đặt Vim-Plug"},{"content":"Theme code highlight: [Onedark](https://github.com/joshdick/onedark.vim) Đây là theme code highlight mà mình thấy khá đẹp và thích sử dụng nhất, nó giống với theme trên Atom, nó trông thế này:\n onedark.png \nCài đặt theme Onedark: Thêm dòng này vào file ~/.vimrc\nvim ~/.vimrc\ncall plug#begin() ... Plug https://github.com/joshdick/onedark.vim call plug#end() ... syntax on colorscheme onedark ... Sau đó lưu lại và chạy lệnh này trên terminal, không cần thoát vim nha:\n:source ~/.vimrc :PlugInstall Tận hưởng giao diện thôi nào 😋\nPhần tiếp theo chúng ta sẽ cài đặt giao diện giống thế này:  vim-airline.png \nXem tiếp \u0026raquo; [Phần 4] Vim là cái quái gì? - Làm đẹp Vim với Vim Airline\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-3-onedark/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-3-onedark/","title":"[Phần 3] Vim là cái quái gì? - Làm đẹp Vim với OneDark"},{"content":"Theme giao diện: [Vim Airline](https://github.com/vim-airline/vim-airline) Vim airline là plugin để làm cho cửa sổ terminal xài Vim của bạn không bị nhàm chán, nó có những thứ phía dưới như sau:\n vim-airline.png \nKhá đẹp đúng không, cho mình biết được những thông tin như:\n NORMAL: mode của vim hiện tại, có thể là NORMAL, INSERT, VIRSUAL Git branch là gì Tên file hiện tại Ngôn ngữ của file đó là gì Encode của file là gì: utf-8 Phần trăm của con trỏ so với tổng số dòng Số dòng hiện tại / tổng số dòng của file (ln:15/65) Cột của con trỏ đang đứng (col:1)  Rồi giờ cài đặt và cấu hình nó nào:\nCài đặt Vim Airline: vim ~/.vimrc\ncall plug#begin() ... Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39; call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Cài thêm font power-airline vô nữa thì nó mới hiển thị mấy cái symbol (ký tự) của branch, mũi tên đúng được:\nTrên ubuntu hoặc debian hoặc các Linux distro dựa trên debian:\nsudo apt install fonts-powerline Trên MacOS hoặc các OS khác:\n# clone git clone https://github.com/powerline/fonts.git --depth=1 # install cd fonts ./install.sh # clean-up a bit cd .. rm -rf fonts =\u0026gt; Đổi font của terminal lại thành \u0026#34;Source Code Pro for Powerline\u0026#34; Vậy là cài xong, giờ cấu hình nào.\nCấu hình Vim Airline: Các bạn vào link này để xem các theme hiện có của Airline nhé: https://github.com/vim-airline/vim-airline/wiki/Screenshots\nMình lựa được theme bubblegum thấy dẹp đẹp, nên quăng vô xài thôi 😍\nlet g:airline_theme=\u0026#39;bubblegum\u0026#39; let g:airline_powerline_fonts=1 Cấu hình cho các symbol hiển thị đúng:\nif !exists(\u0026#39;g:airline_symbols\u0026#39;) let g:airline_symbols = {} endif \u0026#34;\u0026#34; powerline symbols let g:airline_left_sep = \u0026#39;\u0026#39; let g:airline_left_alt_sep = \u0026#39;\u0026#39; let g:airline_right_sep = \u0026#39;\u0026#39; let g:airline_right_alt_sep = \u0026#39;\u0026#39; let g:airline_symbols.branch = \u0026#39;\u0026#39; let g:airline_symbols.readonly = \u0026#39;\u0026#39; let g:airline_symbols.linenr = \u0026#39;ln\u0026#39; let g:airline_symbols.maxlinenr = \u0026#39;\u0026#39; let g:airline_symbols.dirty=\u0026#39;⚡\u0026#39; let g:airline_symbols.colnr=\u0026#39;col\u0026#39;\u0026#34; Cấu hình để hiển thị branch name:\nlet g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#hunks#enabled=0 let g:airline#extensions#hunks#coc_git = 1 Vậy là xong, tận hưởng thành quả nào.\nXem tiếp \u0026raquo; [Phần 5] Vim là cái quái gì? - Thêm Sidebar cho Vim\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-4-vim-airline/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-4-vim-airline/","title":"[Phần 4] Vim là cái quái gì? - Làm đẹp Vim với Vim Airline"},{"content":"Sidebar: [NERDTree](https://github.com/preservim/nerdtree) Thường các IDE cần phải có sidebar để hiển thị cấu trúc thư mục của dự án, để mình dễ hình dung các files bố trí thế nào này nọ.\nTrong Vim cũng sẽ có sidebar này, và NERDTree là plugin mà được nhiều người xài nhất.\nNó trông thế này đây:\n nerdtree.png \nCũng giống mấy cái IDE khác thôi, nhưng mình nói trước cái này sẽ dùng phím để di chuyển nha, chứ không dùng chuột đâu 😅\nCài đặt NERDTree: vim ~/.vimrc\ncall plug#begin()  ... Plug \u0026#39;preservim/nerdtree\u0026#39; ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Giờ cấu hình cho nó nào.\nCấu hình NERDTree: Đây là tất cả config cho NERDTree mà mình đang xài:\n\u0026#34;\u0026#34; Hiện file ẩn let NERDTreeShowHidden=1 autocmd VimEnter * NERDTree | wincmd p autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * NERDTree | if argc() \u0026gt; 0 || exists(\u0026#34;s:std_in\u0026#34;) | wincmd p | endif \u0026#34;\u0026#34; Mở cùng NERDTree cho tab mới, mặc định là mỗi tab sẽ mở 1 cái mới autocmd BufWinEnter * silent NERDTreeMirror \u0026#34;\u0026#34; Tự đóng NERDTree khi đóng tab, mặc định giữ lại NERDTree autocmd BufEnter * if tabpagenr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif autocmd bufenter * if (winnr(\u0026#34;$\u0026#34;) == 1 \u0026amp;\u0026amp; exists(\u0026#34;b:NERDTree\u0026#34;) \\ \u0026amp;\u0026amp; b:NERDTree.isTabTree()) | q | endif \u0026#34;\u0026#34; Tìm file đang mở trong thư mục bên NERDTree (mặc định không sync với nhau) map \u0026lt;leader\u0026gt;r :NERDTreeFind\u0026lt;cr\u0026gt; Gõ :w để lưu, xong gõ tiếp: :source ~/.vimrc\nVậy là xong cái sidebar, quá dễ đúng không 😻\nCác chuyển đổi qua lại giữa NERDTree và code: Các bạn gõ phím tắt Ctrl + ww 2 lần ww nha, thì nó sẽ chuyển đổi qua lại giữa NERDTree và code dễ dàng.\nCách tìm file trong NERDTree: Các bạn có thểm tìm file bằng cách giống như tìm text trong vim:\nGõ dấu / xong gõ tên file cần tìm, ví dụ /index enter, thì nó tự nhảy trỏ tới file đó luôn.\nTìm thư mục cũng tương tự nhé 😂\nCách tạo file mới, đổi tên, xóa file bằng NERDTree: Các bạn chỉ cần di chuyển trỏ tới thư mục cần tạo file/thư mục mới,\nxong ấn m (có nghĩa là show menu lên), xong ấn a (nghĩa là add).\n Nếu tạo file thì để đuôi file vô, không có dấu / ở cuối. Nếu tạo folder thì phải có dấu / ở cuối nha.  Ví dụ:\n nerdtree-2.png \nXem tiếp \u0026raquo; [Phần 6] Vim là cái quái gì? - Search tên file và nội dung nhanh với FZF\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-5-sidebar-with-nerdtree/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-5-sidebar-with-nerdtree/","title":"[Phần 5] Vim là cái quái gì? - Thêm Sidebar cho Vim"},{"content":"Hỗ trợ search file nhanh, giống Ctrl + P trên VSCode: [FZF.vim](https://github.com/junegunn/fzf.vim) Nhu cầu cơ bản của dev là phải search nhanh file cần tìm để đáp ứng code, chứ nhiều khi không thể nhớ đường dẫn vô file đó, nên cần 1 plugin để hỗ trợ nó, nó gọi là FZF, nó giống vầy nè:\n fzf.png \nGõ Ctrl + P rồi search file y chang bên VSCode nha ✌️\nCài đặt FZF.vim vim ~/.vimrc\ncall plug#begin()  ... Plug \u0026#39;junegunn/fzf\u0026#39;, { \u0026#39;do\u0026#39;: { -\u0026gt; fzf#install() } } Plug \u0026#39;junegunn/fzf.vim\u0026#39; ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Xong rồi, giờ cấu hình tiếp nào\nCấu hình FZF.vim: \u0026#34;\u0026#34; Map phím tắt Ctrl + P nnoremap \u0026lt;silent\u0026gt; \u0026lt;C-S-p\u0026gt; :Files\u0026lt;CR\u0026gt; \u0026#34;\u0026#34; Tìm file trong project, nhưng bỏ mấy thư mục như node_modules ra, để tìm nhẹ hơn. set wildmode=list:longest,list:full set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__ let $FZF_DEFAULT_COMMAND = \u0026#34;find * -path \u0026#39;*/\\.*\u0026#39; -prune -o -path \u0026#39;**/node_modules/**\u0026#39; -prune -o -path \u0026#39;node_modules/**\u0026#39; -prune -o -path \u0026#39;target/**\u0026#39; -prune -o -path \u0026#39;dist/**\u0026#39; -prune -o -type f -print -o -type l -print 2\u0026gt; /dev/null\u0026#34; Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Vậy là ngon, chạy thử thôi 😋\nHỗ trợ search nội dung trong file nhanh, giống Ctrl + Shift + F trên VSCode: Phần này chúng ta cũng sử dụng FZF.vim luôn, không cần cài plugin mới nhé, cấu hình luôn thôi nào:\ncommand! -bang -nargs=* Rg call fzf#vim#grep(\u0026#34;rg --column --line-number --no-heading --color=always --smart-case \u0026#34;.shellescape(\u0026lt;q-args\u0026gt;), 1, {\u0026#39;options\u0026#39;: \u0026#39;--delimiter : --nth 4..\u0026#39;}, \u0026lt;bang\u0026gt;0) \u0026#34;\u0026#34; Map phím \u0026#34;\\f\u0026#34; để tìm nội dung, tương tự như \u0026#34;Ctrl + Shift + F\u0026#34; trên VSCode nhé nnoremap \u0026lt;silent\u0026gt; \u0026lt;Leader\u0026gt;f :Rg\u0026lt;CR\u0026gt; Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Phần tiếp theo mình sẽ cấu hình cho Vim có thể gợi y code (autocomplete code) như thế nào nhé\nXem tiếp \u0026raquo; [Phần 7] Vim là cái quái gì? - Autocomplete code như thế nào\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-6-tim-file-voi-fzf/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-6-tim-file-voi-fzf/","title":"[Phần 6] Vim là cái quái gì? - Search tên file và nội dung nhanh với FZF"},{"content":"Language Server Protocol (LSP): VSCode là 1 IDE rất phổ biến, bởi vì nó hỗ trợ rất nhiều ngôn ngữ, cả VSCode và LSP cho VSCode đều do Microsoft phát triển nên cực kỳ ngon rồi.\nTrong Vim cũng có rất nhiều giải pháp cho LSP, sau khi thử vài cái thì mình thấy COC.nvim là hợp lý và mạnh nhất so với mấy cái còn lại.\nCài đặt [COC.nvim](https://github.com/neoclide/coc.nvim) vim ~/.vimrc\ncall plug#begin() ... Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} ... call plug#end() Gõ :w để lưu, xong gõ tiếp:\n:source ~/.vimrc :PlugInstall Vậy là đã cài đặt xong COC.nvim, giờ tiếp tục cấu hình\nCài đặt LSP cho javascript/typescript Chạy lệnh này trên vim của bạn:\n:CocInstall coc-json coc-tsserver Hoặc bạn có thể để vào trong file ~/.vimrc để dễ dàng cài đặt nơi khác, dưới đây là toàn bộ extensions mình đang xài\nlet g:coc_global_extensions = [ \\ \u0026#39;coc-ultisnips\u0026#39;, \\ \u0026#39;coc-json\u0026#39;, \\ \u0026#39;coc-tsserver\u0026#39;, \\ \u0026#39;coc-html\u0026#39;, \\ \u0026#39;coc-css\u0026#39;, \\ \u0026#39;coc-yaml\u0026#39;, \\ \u0026#39;coc-highlight\u0026#39;, \\ \u0026#39;coc-eslint\u0026#39;, \\ \u0026#39;coc-git\u0026#39;, \\ \u0026#39;coc-prettier\u0026#39;, \\ \u0026#39;coc-flutter\u0026#39;, \\ \u0026#39;coc-angular\u0026#39;, \\ \u0026#39;coc-pyright\u0026#39;, \\ ] Bạn có thể xem danh sách các extensions của COC.nvim tại đây: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions\nCấu hình autocomplete, auto import file: COC.nvim cũng hỗ trợ autocomplete sau khi cài đặt LSP, cũng như auto import file vô\nCách map key như sau:\n\u0026#34;\u0026#34; Map Ctrl + Space để show list functions/biến autocomplete inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-space\u0026gt; coc#refresh() \u0026#34;\u0026#34; Tự động import file của biến/function khi chọn và nhấn Tab inoremap \u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-y\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;TAB\u0026gt;\u0026#34; Khá đơn giản phải không, thực tế phần auto import hoạt động rất hiệu quả, mình thấy ngon hơn VSCode ở chỗ nhanh hơn nhiều.\nCấu hình phím tắt go to definition\u0026hellip; COC.nvim hỗ trợ các tính năng auto complete, go to definition\u0026hellip; rất tốt, bạn đưa phần này vào ~/.vimrc\n\u0026#34;\u0026#34; Go to definition ở tab mới nmap \u0026lt;silent\u0026gt; gd :call CocAction(\u0026#39;jumpDefinition\u0026#39;, \u0026#39;tab drop\u0026#39;)\u0026lt;CR\u0026gt; nmap \u0026lt;silent\u0026gt; gy \u0026lt;Plug\u0026gt;(coc-type-definition) nmap \u0026lt;silent\u0026gt; gi \u0026lt;Plug\u0026gt;(coc-implementation) nmap \u0026lt;silent\u0026gt; gr \u0026lt;Plug\u0026gt;(coc-references) Hiển thị document cho function, biến: nnoremap \u0026lt;silent\u0026gt; K :call \u0026lt;SID\u0026gt;show_documentation()\u0026lt;CR\u0026gt; function! s:show_documentation() if (index([\u0026#39;vim\u0026#39;,\u0026#39;help\u0026#39;], \u0026amp;filetype) \u0026gt;= 0) execute \u0026#39;h \u0026#39;.expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) elseif (coc#rpc#ready()) call CocActionAsync(\u0026#39;doHover\u0026#39;) else execute \u0026#39;!\u0026#39; . \u0026amp;keywordprg . \u0026#34; \u0026#34; . expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) endif endfunction Highlight word chỗ con trỏ đang đứng: autocmd CursorHold * silent call CocActionAsync(\u0026#39;highlight\u0026#39;) Xem tiếp \u0026raquo; [Phần 8] Vim là cái quái gì? - Prettier\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-7-autocomplete-code-nhu-the-nao/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-7-autocomplete-code-nhu-the-nao/","title":"[Phần 7] Vim là cái quái gì? - Autocomplete code như thế nào"},{"content":"Prettier Đây là 1 tính năng mà mình rất thích và rất hay xài trong các dự án, và cũng bắt buộc các thành viên trong công ty xài nó, vì nó tự động format code về cùng 1 định dạng, không cần phải suy nghĩ hoặc làm thủ công nữa, khá hữu ích khi làm việc nhóm nha 😋\nCOC.nvim có hỗ trợ prettier extension luôn, đây là cách cài đặt và cấu hình:\n  List extension trên mình đã có prettier rồi, nhưng nếu bạn muốn cài đặt riêng thì dùng lệnh này: :CocInstall coc-prettier\n  Update config cho COC setting như sau:\n Mở file coc-settings.json bằng cách: :CocConfig Thêm dòng này vào:  \u0026#34;coc.preferences.formatOnSaveFiletypes\u0026#34;: [ \u0026#34;css\u0026#34;, \u0026#34;markdown\u0026#34;, \u0026#34;typescript\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;javascriptreact\u0026#34;, \u0026#34;typescriptreact\u0026#34;, \u0026#34;json\u0026#34; ],  Lưu lại: :w    Cấu hình tự động format khi lưu file:\n  command! -nargs=0 Prettier :call CocAction(\u0026#39;runCommand\u0026#39;, \u0026#39;prettier.formatFile\u0026#39;) let g:prettier#autoformat = 1   Thiết lập file .prettierrc\n File này là file cấu hình prettier có thể đọc và thực hiện khi format  { \u0026#34;trailingComma\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;arrowParens\u0026#34;: \u0026#34;always\u0026#34;, \u0026#34;printWidth\u0026#34;: 120 }   Bạn có thể tham khảo thêm config của .prettierrc tại đây: https://github.com/neoclide/coc-prettier.\n  Phần tiếp theo chúng ta sẽ cấu hình ESLint để đảm bảo code theo chuẩn, dễ dàng làm việc nhóm nhé.\nXem tiếp \u0026raquo; [Phần 9] Vim là cái quái gì? - Cài đặt ESLint cho Vim\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-8-prettier/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-8-prettier/","title":"[Phần 8] Vim là cái quái gì? - Prettier"},{"content":"ESLint Vâng, đây là 1 trong những thứ giúp chúng ta làm việc nhóm tốt hơn, đây là 1 extension giúp phân tích và báo warning các lỗi cơ bản trong khi code, giúp quá trình làm việc nhóm đỡ vất vả, đỡ phải xung đột giữa các thành viên trong nhóm.\nESLint không giúp bạn code nhanh hơn, hay code của bạn chạy nhanh hơn, mà nó giúp code dễ đọc hơn, dễ hiểu hơn, giúp quá trình debug dễ hơn trong tương lai, tránh bớt các bug không đáng có do quá trình code chúng ta mà ra.\nESLint cũng có thể giúp chúng ta fix tự động các lỗi ở mức dễ, như thiếu dấu ; hay format không đúng theo prettier quy đinh\u0026hellip;\nCài đặt ESLint COC.nvim cũng hỗ trợ cho chúng ta extension này luôn, chỉ việc cài đặt và sử dụng.\nTrong list extensions trên mình đã có eslint rồi, nhưng các bạn có thể cài đặt thủ công bằng lệnh này: :CocInstall coc-eslint\nCác bạn có thể tham khảo thêm tại đây: https://github.com/neoclide/coc-eslint\nXem tiếp \u0026raquo; [Phần 10] Vim là cái quái gì? - Về termial trong Vim thì sao nhỉ?\n","date":"2021-06-12T00:00:00Z","image":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-9-cai-dat-eslint-cho-vim/cover_hue0e6fc9d6f258765cd954a7597dfb97a_379656_120x120_fill_box_smart1_3.png","permalink":"https://www.laptrinhdeom.xyz/bai-viet/vim-la-cai-quai-gi-cach-cai-dat-va-su-dung-vim-nhu-vscode-phan-9-cai-dat-eslint-cho-vim/","title":"[Phần 9] Vim là cái quái gì? - Cài đặt ESLint cho Vim"}]